"""
Django settings for openledger project.

Generated by 'django-admin startproject' using Django 1.10.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

DEBUG = False

import socket
try:
    local_ip = str(socket.gethostbyname(socket.gethostname()))
except socket.gaierror:
    local_ip = 'localhost'

ALLOWED_HOSTS = [local_ip,
                 'localhost',
                 '.creativecommons.org',
                 '.elasticbeanstalk.com',]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django_cas_ng',
    'imageledger',
    'rest_framework',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'django_cas_ng.backends.CASBackend',
)

ROOT_URLCONF = 'openledger.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'environment': 'openledger.jinja2.environment',
            'extensions': [
                'jinja2.ext.with_',
                'jinja2.ext.do',
            ],
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
import jinja2
import openledger.jinja2
jinja2.filters.FILTERS['pluralize'] = openledger.jinja2.pluralize

WSGI_APPLICATION = 'openledger.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DJANGO_DATABASE_NAME'),
        'USER': os.environ.get('DJANGO_DATABASE_USER'),
        'PASSWORD': os.environ.get('DJANGO_DATABASE_PASSWORD'),
        'HOST': os.environ.get('DJANGO_DATABASE_HOST'),
        'PORT': os.environ.get('DJANGO_DATABASE_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

STATIC_ROOT = os.path.join(BASE_DIR, "deploy")

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'openledger_cache',
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True



TESTING = False

# REST framework settings
REST_FRAMEWORK = {
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
    )
}

# Authentication with CAS

CAS_SERVER_URL = "https://login.creativecommons.org"
CAS_LOGOUT_COMPLETELY = False
CAS_CREATE_USER = True

ELASTICSEARCH_INDEX = "openledger"

# Search results per page
RESULTS_PER_PAGE = 20

# These providers are current loaded
WORK_TYPES = {
    'photos': ['flickr', '500px'],
    'cultural': ['rijksmuseum', 'nypl', 'wikimedia', 'met', 'bl', 'nhl', 'nbc', 'cg']
}
PROVIDERS = {
    'flickr': {'display_name': 'Flickr',
               'url': 'https://flickr.com',},
    'rijksmuseum': {'display_name': 'Rijksmuseum',
                    'url': 'https://rijksmuseum.nl/',
                    },
    'nypl': {'display_name': 'New York Public Library',
             'url': 'http://digitalcollections.nypl.org/'},
    '500px': {'display_name': '500px',
              'url': 'https://500px.com/'},
    'met': {'display_name': 'Metropolitan Museum of Art',
              'url': 'http://www.metmuseum.org/'},
    'bl': {'display_name': 'British Library',
                            'url': 'http://www.bl.uk/'},
    'nhl': {'display_name': 'Natural History Museum, London',
            'url': 'http://www.nhm.ac.uk/'},
    'nbc': {'display_name': 'Naturalis Biodiversity Center',
            'url': 'http://www.naturalis.nl/en/'},
    'cg': {'display_name': 'Culture Grid',
           'url': 'http://www.culturegrid.org.uk/'}
}

try:
    from openledger.local import *

except ImportError:

    # API-specific
    API_500PX_KEY = os.environ.get('API_500PX_KEY')
    API_500PX_SECRET = os.environ.get('API_500PX_SECRET')
    API_RIJKS = os.environ.get('API_RIJKS')
    FLICKR_KEY = os.environ.get('FLICKR_KEY')
    FLICKR_SECRET = os.environ.get('FLICKR_SECRET')
    NYPL_KEY = os.environ.get('NYPL_KEY')
    EUROPEANA_API_KEY = os.environ.get('EUROPEANA_API_KEY')
    EUROPEANA_PRIVATE_KEY = os.environ.get('EUROPEANA_PRIVATE_KEY')
    ELASTICSEARCH_URL = os.environ.get('ELASTICSEARCH_URL')
    ELASTICSEARCH_PORT = 80
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')

    SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')
    AKISMET_KEY = os.environ.get('AKISMET_KEY')
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'file': {
                'level': 'INFO',
                'class': 'logging.FileHandler',
                'filename': os.environ.get('LOG_FILE')
            },
        },
        'loggers': {
            'django': {
                'handlers': ['file'],
                'level': 'INFO',
                'propagate': True,
            },
        },
    }
